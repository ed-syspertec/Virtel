Multi Line WTO Support in VIRTEL
================================

The Virtel XWTO macro has been modified to support Multi Line WTO. The
CONNID= parameter is used to connect related messages together. This
will ensure that clients, who trap VIRTEL messages in Automation, obtain
all the detail.

Before multiline WTO:-

N FFFFFFF ZAMVS1 14044 10:46:11.36 STC02146 00000090 VIRC121E PAGE NOT
FOUND FOR CLLOC009 ENTRY POINT 'CLIWHOST' DIRECTORY

S 'W2H '(W2H-DIR W2H-KEY )

N FFFFFFF ZAMVS1 14044 10:46:11.36 STC02146 00000090 PAGE :
'LASTPAGE.HTML' URL : '/w2h/LASTPAGE.HTML'

In the above example two separate messages area issued via the SVC 35
WTO macro - the ‘N’ flag in column 1 indicates a separate WTO. Both
messages are related in describing a VIRTEL error - that being a missing
page. They would, however, be treated as separate messages by any
automation product. The first message would be trapped by automation
because it has standard message id; the second message, however, would
be lost to automation as there is no message id.

With the XWTO multi\_line modification the problem illustrated above is
reported as 1 message even though there are two calls are produced via
the SVC 35 WTO. This time the messages are related and reported to
automation as one message through new keywords in the Virtel XWTO macro.

M FFFFFFF ZAMVS1 14055 16:50:54.66 STC02980 00000090 VIRC121E PAGE NOT
FOUND FOR CLLOC009 ENTRY POINT 'CLIWHOST' DIRECTORY '

S 608

D 608 00000090 'W2H '(W2H-DIR W2H-KEY )

E 608 00000090 PAGE : 'LASTPAGE.HTML' URL : '/w2h/LASTPAGE.HTML'

Note the change in flags in column 1. WTO reports the message as a
multiline message. The character “M” in column 1 indicates to automation
that this is a multi-line message and the character ‘E’ indicates the
last message in the multi\_line display.

**
Logic changes**

XWTO New keywords specified on macro.

**Messages**

None

**Macro definition**

&LABEL XWTO &V1,&V2,&V3,&V4,&V5,&V6,&V7,&V8,&V9,&V10,&V11,&V12,&V13,\*

&WORK=@WTOPARM\ **,&ML=N,&CONNID=,&MLTYPE=S,&MSG=N **

**New macro keywords**

**ML = Y \| N** Multiline = Yes or No. Default = N

**CONNID =** Address of 4 byte area to store connection id.

Applies only when ML=Y is specified.

**MLTYPE = S** = Start

**C** = Continue

**E** = End

Applies only when ML=Y is specified.

**MSG=** Address of prebuilt message. Default = N for No prebuilt
message area.

Applies only when ML=Y is specified.

**
Example:-**

Module VIRC012

M404 PROC , UPDT2426

XWTO '&PRF.C121E PAGE NOT FOUND FOR ',LUNAME, 21142699\*

' ENTRY POINT ''',WLOGAPPL,'''', 21142699\*

' DIRECTORY ''',WREPERT,'''(',WTPCDIR, 31264359\*

' ',CLEUSER, 48323148\*

')',ML=Y,MLTYPE=S,CONNID=WTOCONID ESH

PERFORM MFILE

XWTO ML=Y,MLTYPE=C,MSG=@WTOPARM,CONNID=WTOCONID ESH

XWTO ' ',ML=Y,MLTYPE=E,CONNID=WTOCONID ESH

The MFILE subroutine builds a SVC 35 parameter list pointed to by
@WTOPARM. The standard SVC 35 parameter list header format is a 2 byte
length +2 bytes flags then the messages to be issued. In the example
above, a multiline WTO is built using three XWTO multi-line calls. The
first line of the message is indicated by the keywords ML=Y, MLTYPE=S.
The second part, indicated by ML=Y, MLTYPE=C, is a continuation message
and finally, the last message, ML=Y,MLTYPE=E is a end message which
indicates the end of a series of message parts. There is no text with
MLTYPE=E.

Here is another example. This time two continuation lines have been
added. One which refers to a pre\_built WTO area as defined by @WTOPARM
and another where the text is within the ZWTO and extends beyond 71
characters.

M FFFFFFF ZAMVS1 14056 12:59:07.78 STC03041 00000090 VIRC121E PAGE NOT
FOUND FOR CLLOC009 ENTRY POINT 'CLIWHOST' DIRECTORY '

S 406

D 406 00000090 'W2H '(W2H-DIR W2H-KEY )

D 406 00000090 PAGE : 'LASTPAGE.HTML' URL : '/w2h/LASTPAGE.HTML'

D 406 00000090 ANOTHER LINE. THIS LINE HAS MORE THAN 71 CHARACTERS AND
THEREFORE WILL

E 406 00000090 BE SPLIT ACROSS TWO LINES. HOPEFULLY!

The code for the above example is shown below:-

XWTO '&PRF.C121E PAGE NOT FOUND FOR ',LUNAME, 21142699\*

' ENTRY POINT ''',WLOGAPPL,'''', 21142699\*

' DIRECTORY ''',WREPERT,'''(',WTPCDIR, 31264359\*

' ',CLEUSER, 48323148\*

')',ML=Y,MLTYPE=S,CONNID=WTOCONID

PERFORM MFILE \* PREBUILD AREA IN @WTOPARM

XWTO ML=Y,MLTYPE=C,MSG=@WTOPARM,CONNID=WTOCONID

XWTO 'ANOTHER LINE. THIS LINE HAS MORE THAN 71 CHARACTERS ANDX

THEREFORE WILL BE SPLIT ACROSS TWO LINES. HOPEFULLY!', X

ML=Y,MLTYPE=C,CONNID=WTOCONID

XWTO ML=Y,MLTYPE=E,CONNID=WTOCONID

We see the message below has 6 parts as defined by the message code:-

M - Multiline message start. First part of 71 bytes.

S - Connect ID

D - Second part of 1\ :sup:`st` message part, bytes 72 onwards.

D - 2\ :sup:`nd` message part. Less then 71 bytes and from a predefined
XTO parameter list.

D - 3\ :sup:`rd` message part. 1\ :sup:`st` part of 71 bytes.

D - 3\ :sup:`rd` message part. 2\ :sup:`nd` part of bytes 72 onwards

E - End of message.

**
Notes**

The change should be downward compatible so should not affect existing
code.

The following DSECT is required to map the extended WTO workarea. The
extended workarea is defined in the 255 byte WTOPARM work area.

WTOWPX DSECT ESH

DS 0F

WPXTXTLN DS XL2

WPXTXTFG DS XL2

WPXTADDR DS XL4

WPXVER DS XL1

DS XL2

WPXLEN DS XL1

WPXFLG DS XL2

ORG WTOWPX+112

WPXTYP DS XL2

DS XL1

WPXCNT DS XL1

WPXEND EQU \*-WTOWPX
